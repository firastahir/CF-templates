---
AWSTemplateFormatVersion: '2010-09-09'
Description: SQ CF Stack
Mappings:
  RegionMap:
    eu-central-1:
      AMI: ami-337be65c
    eu-west-1:
      AMI: ami-7c491f05
    eu-west-2:
      AMI: ami-ee6a718a
    eu-west-3:
      AMI: ami-bfff49c2
    ca-central-1:
      AMI: ami-dcad28b8
    us-east-1:
      AMI: ami-02e98f78
    us-west-2:
      AMI: ami-a042f4d8
    us-west-1:
      AMI: ami-65e0e305
    ap-southeast-1:
      AMI: ami-d2fa88ae
    ap-southeast-2:
      AMI: ami-b6bb47d4
    ap-northeast-1:
      AMI: ami-25bd2743
    ap-south-1:
      AMI: ami-5d99ce32
Outputs:
  SonarQube:
    Description: Please copy this URL into your web browser to access SonarQube.
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt:
          - DOAEc2Instance
          - PublicIp
        - ":9000"
        - "/"
Parameters:
  
  KeyName:
    Description: 'Key-pair name to use. Note : Make sure you choose a key which you
      have.'
    Type: AWS::EC2::KeyPair::KeyName
Resources:
  DOAEc2Instance:
    Properties:
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          DeleteOnTermination: 'true'
          VolumeSize: 50
          VolumeType: gp2
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - Ref: AWS::Region
        - AMI
      InstanceType: m4.xlarge
      KeyName:
        Ref: KeyName
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'true'
        DeleteOnTermination: 'true'
        DeviceIndex: '0'
        GroupSet:
        - Ref: DoaSecurityGroup
        SubnetId:
          Ref: PublicSubnet
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - ADOPInstance
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#!/bin/bash\n"
            - 'yum update -y

'
            - 'cat > /etc/yum.repos.d/docker.repo <<-''EOF''

'
            - "[dockerrepo]\n"
            - 'name=Docker Repository

'
            - 'baseurl=https://yum.dockerproject.org/repo/main/centos/$releasever/

'
            - 'enabled=1

'
            - 'gpgcheck=1

'
            - 'gpgkey=https://yum.dockerproject.org/gpg

'
            - 'EOF

'
            - |
              echo '
              ==============================================================================='
            - 'echo ''=========================== Installing Yum Packages ===========================''

'
            - |
              echo '===============================================================================
              '
            - 'yum -y install docker-engine-17.05.0.ce-1.el7.centos.x86_64

'
            - 'systemctl daemon-reload && systemctl restart docker

'
            - 'yum -y install wget unzip git

'
            - 'grep ''tcp://0.0.0.0:2375'' /usr/lib/systemd/system/docker.service
              || sed -i ''s#ExecStart\(.*\)$#ExecStart\1 -H tcp://0.0.0.0:2375 -H
              unix:///var/run/docker.sock#'' /usr/lib/systemd/system/docker.service

'
            - 'systemctl daemon-reload && systemctl restart docker

'
            - 'systemctl enable docker.service

'
            - |
              echo '
              ==============================================================================='
            - 'echo ''============================== Installing AWS CLI =============================''

'
            - |
              echo '===============================================================================
              '
            - 'wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm

'
            - 'rpm -Uvh epel-release-6-8.noarch.rpm

'
            - 'easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz

'
            - 'echo ''=========================== Installing Docker Compose ==========================''

'
            - 'curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-`uname
              -s`-`uname -m` > /usr/bin/docker-compose

'
            - 'chmod +x /usr/bin/docker-compose

'
            - 'echo ''=========================== Running Docker Compose ==========================''

'
            - 'mkdir -p /data && cd /data

'
            - 'git clone https://github.com/firastahir/docker-compose.git

'
            - 'cd /data/docker-compose

'
            - 'docker-compose up -d

'
            - 'curl -X PUT -H ''Content-Type:'' --data-binary ''{"Status" : "SUCCESS",'
            - '"Reason" : "DOA is ready",'
            - '"UniqueId" : "DOAEc2Instance",'
            - '"Data" : "Done"}'' '
            - "\""
            - Ref: DOAWaitConditionHandle
            - "\"\n"
            - "\n"
    Type: AWS::EC2::Instance
    DependsOn:
    - VpcGatewayAttachment
    - PublicSubnetPublicRouteTableAssoc
  DoaSecurityGroup:
    Properties:
      GroupDescription: Enabling access to all IPs and below listed ports
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: '22'
        IpProtocol: tcp
        ToPort: '22'
      - CidrIp: 0.0.0.0/0
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      - CidrIp: 0.0.0.0/0
        FromPort: '443'
        IpProtocol: tcp
        ToPort: '443'
      - CidrIp: 0.0.0.0/0
        FromPort: '9000'
        IpProtocol: tcp
        ToPort: '9000'
      VpcId:
        Ref: Vpc
    Type: AWS::EC2::SecurityGroup
  PublicRouteDefault:
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VpcInternetGateway
      RouteTableId:
        Ref: PublicRouteTable
    Type: AWS::EC2::Route
    DependsOn: VpcGatewayAttachment
  PublicRouteTable:
    Properties:
      VpcId:
        Ref: Vpc
    Type: AWS::EC2::RouteTable
  PublicSubnet:
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId:
        Ref: Vpc
    Type: AWS::EC2::Subnet
  PublicSubnetPublicRouteTableAssoc:
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet
    Type: AWS::EC2::SubnetRouteTableAssociation
  Vpc:
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
    Type: AWS::EC2::VPC
  VpcGatewayAttachment:
    Properties:
      InternetGatewayId:
        Ref: VpcInternetGateway
      VpcId:
        Ref: Vpc
    Type: AWS::EC2::VPCGatewayAttachment
  VpcInternetGateway:
    Type: AWS::EC2::InternetGateway
  DOAWaitConditionHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
    Properties: {}
  DOAWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: DOAEc2Instance
    Properties:
      Handle:
        Ref: DOAWaitConditionHandle
      Timeout: '1200'
